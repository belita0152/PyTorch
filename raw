import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import mne
import os

from scipy import signal
from scipy.signal import butter, filtfilt
from brainflow.data_filter import DataFilter

# data filter
def butterworth_filter(data, lowcut, highcut, fs, order=4):
    nyquist = 0.5 * fs
    low = lowcut / nyquist
    high = highcut / nyquist
    b, a = butter(order, [low, high], btype='band')
    filtered_data = filtfilt(b, a, data, axis=1)
    return filtered_data


def eeg_data(dir_path, file_name, lowcut, highcut, fs, channel_name, mne_plot=False):
    # 데이터 불러오기
    PATH = os.path.join(dir_path, file_name)
    raw_data = DataFilter.read_file(PATH)

    # emg data filtering
    eeg_data = raw_data[1:16,:]
    eeg_data /= 1e6
    filtered_data = butterworth_filter(data=eeg_data, lowcut=lowcut, highcut=highcut, fs=fs)

    # trigger 불러오기
    trigger = raw_data[-1,:].transpose()
    trigger = np.expand_dims(trigger, axis=0)
    #
    eeg_trigger_data = np.concatenate((filtered_data, trigger),axis=0)

    # mne 객체 만들기
    ch_types = ['eeg'] * (len(channel_name)-1) + ['stim']
    info = mne.create_info(ch_names=channel_name, sfreq=fs, ch_types=ch_types)
    raw = mne.io.RawArray(eeg_trigger_data, info)

    # trigger 위치 찾기
    events = mne.find_events(raw, stim_channel='trigger')

    if mne_plot is True:
        raw.plot(n_channels=15, scalings={'eeg': 'auto', 'stim': 1}, events=events, color='gray',
                 event_color={1: 'r', 2: 'g'}, show=True, block=True, title=file_name)

    return raw, events
